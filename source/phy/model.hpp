#ifndef phy_model_hpp__
#define phy_model_hpp__

#include <raylib.h>
#include <torch/torch.h>
#include "../s4/model.hpp"  /* Model definition */
#include "../s2/von_mises.hpp"

/**
 * @brief Phy_Model_Parameters are used to pass
 *        construction-time parameters to Phy_Model
 * 
 * 
 * @param parameter_H Number of parameters in H position
 * @param parameter_W Number of parameters in W position
 * 
 * @param parameter_phy_H Actual size of parameter_H in terms of screen size
 * @param parameter_phy_W Actual size of parameter_W in terms of screen size
 * 
 * @param phy_H Actual size of PLM (1600px)
 * @param phy_W Actual size of PLM (2560px)
 * 
 */
struct Phy_Model_Parameters {
    int64_t parameter_H     = 128;
    int64_t parameter_W     = 128;
    int64_t parameter_phy_H = 1024;
    int64_t parameter_phy_W = 1024;

    double  kappa           = 25;

    const   int64_t phy_H   = 1600;
    const   int64_t phy_W   = 2560;
    const   int64_t bits_per_frame = 24;
};

class Phy_Model : public s4_Model {
public:
    /**
     * @brief Phy_Model is the class where the black-box model is defined.
     *        This implements a single-layer model.
     * 
     *        See s4/model.hpp for for information on how models are to be implemented.
     * 
     */
    Phy_Model (Phy_Model_Parameters);
    ~Phy_Model () override;

    /**
     * @brief logp_action () returns the actions generated by Phy_Model.
     *        Actions are the perturbations used to update the model
     */
    torch::Tensor logp_action () override;

    /**
     * @brief N_samples () returns the number of samples
     * 
     */
    int64_t N_samples () const override;

    /**
     * @brief generate_actions () generates N number of actions
     * 
     * @return True if actions are generatable.
     * 
     */
    bool  generate_actions (int64_t);

    /**
     * @brief is_actions_depleted () returns True if 
     *        all actions are depleted.
     *   
     *        Useful if you want to advance
     *        an image.
     */
    bool  is_actions_depleted () const;

    /**
     * @brief Refill actions without sampling
     * 
     */
    void refill_actions_without_sampling ();

    /**
     * @brief Returns the actions sequentially.
     *        The number of actions returned is
     *        m_params.bits_per_frame, which is
     *        typically 24.
     * 
     *        You should call is_actions_depleted()
     *        before calling get_actions_sequentially.
     * 
     *        You can refill actions via two functions:
     * 
     *              1. generate_actions (int64_t)
     *              2. refill_actions_without_sampling()
     */
    torch::Tensor get_actions_sequentially ();

    /**
     * @brief Returns a vector of all parameters in network.
     * 
     */
    std::vector<torch::Tensor> parameters ();

private:
    Phy_Model_Parameters m_params;

    torch::Tensor m_parameter;
    torch::Tensor m_action;
    int64_t       m_action_counter;
    int64_t       m_number_of_actions;
    

    /* Distribution used */
    VonMises      m_von_mises {};

};


#endif
