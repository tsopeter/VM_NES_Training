/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <unistd.h>
#include "platform.h"
#include "xil_printf.h"

#define UPIN_ADDR  0x43c00000
#define LED_ADDR   0x43c00004
#define STATE_ADDR 0x43c00008
#define RESET      0x43c0000C
#define MPT_SET    0x43c00014
#define PIN_WRITE(p, x) *(u32*)p = x
#define PIN_READ(p, x) x = *(u32*)p
//#define DEBUG_HELLO

int main()
{
    init_platform();

    //char ch = '\0';
    volatile void *upin  = (volatile void*)(UPIN_ADDR);
    volatile void *led   = (volatile void*)(LED_ADDR);
    volatile void *state = (volatile void*)(STATE_ADDR);
    volatile void *reset = (volatile void*)(RESET);
    volatile void *mpt   = (volatile void*)(MPT_SET);

    sleep(10);
    printf("Single Trigger setup....\r\n");

    //
    // we initialize the board here
    PIN_WRITE(reset, 0x1);
    sleep(10);
    PIN_WRITE(reset, 0x0);
    printf("Single Trigger setup complete...\r\n");

    u32 upin_value, led_value, state_value, reset_value, mpt_value, skip_value, count_value;
    // print initial states
    printf("Initial states:\r\n");
    PIN_READ(upin, upin_value);
    PIN_READ(led, led_value);
    PIN_READ(state, state_value);
    PIN_READ(reset, reset_value);

    while (1) {
    	getchar();	// every time we get a character, we push upin

    	// set upin high
    	PIN_WRITE(upin, 0x1);

    	// set upin low
    	PIN_WRITE(upin, 0x0);
    }


    cleanup_platform();
    return 0;
}

